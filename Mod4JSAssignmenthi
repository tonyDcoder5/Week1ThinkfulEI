/*
  The following functions had various syntax errors in them. 
  I was tasked to fix the bugs to get the tests to pass!
  
  When any of the following function's parameters reference `products`, 
  they are referencing an array full of objects with the following shape:
   {
     name: "Slip Dress",
     priceInCents: 8800,
     availableSizes: [ 0, 2, 4, 6, 10, 12, 16 ],
     quantity: 0
   }
   
  When any of the following function's parameters reference `product`, 
  they are referencing an object with the above shape.
*/


/* 
Tasked to write a function that references the key-priceInCents 
then converts that value to a string literal template that can be used
to print on a receipt
*/
function printablePrice(priceInCents) 
{
  const amount = (priceInCents / 100).toFixed(2);
  return `$${amount}`;
}


/*
Tasked to write a func that takes in an arr of objs-[{products}],
and two args {name, size} to return a specified product that matches
args inputs 
*/

function chooseItemByNameAndSize(products, name, size) 
{
  let result = null;
  
  for (let i = 0; i < products.length; i++)
    {
      let product = products[i];
      
      if (product.name === name && product.availableSizes.includes(size))
        {
          result = product;
        }
    }
    return result; 
}

/*
Tasked to write a func that uses destructuring to take in the 
{name, priceInCents} props from a sample arr of [{products}] objs, 
and adds those values to an empty, inline declared, {cart} obj. 
Then return {cart} in a modified data structure using {priceInCents} 
from the [{products}] obj and adding {quantity: 1} prop 
*/


function addProductToCart({name, priceInCents}, cart = {}) 
{
  
  const cartItem = cart[name];
  
  if(cartItem)
    {
      cartItem.quantity++;
    }
  else 
    {
      cart[name] = {priceInCents, quantity: 1};
    }
  
  return cart;

}


/*
Tasked to write a func that takes in a group of objs {cart} 
and using the accumulator pattern and the {priceInCents} prop within 
the {cart} obj, a declared total variable set at 0 is returned with 
the running total of each item in the [{cart}] {priceInCents} value 
*/


function calculateTotal(cart) 
{
  let total = 0;
  
  for (let item in cart)
    {
      let cartItem = cart[item];      
      total += cartItem.priceInCents * cartItem.quantity;;
    }
  return total;
}

/*
Tasked to write a func that takes in an arg of {cart}, 
uses the helper func calculateTotal() to store total of {cart}
(and checks if anything is in {cart} before completing code)
then takes each {item} object within {cart} and uses needed properties
{quantity, printablePrice(priceInCents)*converted using helper func*}
to return a reciept string concatenated and modified using the provided 
values `${quantity} ${item} ${printablePrice} and ${total}` 
*/


function printReceipt(cart = {}) 
{
  let total = calculateTotal(cart);
  if (!total) return null;
  
  let receipt = "";
  
  for (let item in cart)
    {
      const { quantity, priceInCents } = cart[item];
            
      receipt += `${quantity}x${item} - ${printablePrice(priceInCents*quantity)}\n`
      
    }
  return receipt + `Total: ${printablePrice(total)}`;

  }

module.exports = {
  chooseItemByNameAndSize,
  addProductToCart,
  calculateTotal,
  printReceipt,
};
